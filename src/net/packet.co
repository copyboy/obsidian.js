BufferedStream = require "./bufferedStream"
ReadError = require "./readError"
Slot      = require "./slot"
packets   = require "./packets"

makeHex = -> "0x#{if it <= 0xF then "0" else ""}#{it.toString 16 .toUpperCase!}"

/*
 * Packet class
 */
module.exports = class Packet
  
  (type, @id, ...data) ~>
    packet = packets[@id]
    @name = packet.name
    @data = []
    
    dataCounter = 0
    if data.length != expectedLength = (i = 0; ++i if name? for name of packet[type]; i)
      throw new Error "#{expectedLength} arguments expected, #{data.length} given"
    for t, i of packet.types
      name = packet[type][i]
      value =
        if name == null then t.default
        else @data[name] = data[dataCounter++]
      if typeof t.type == \string
        if typeof value != t.type
          throw new Error "#{t.type} expected, #{typeof value} given"
      else
        if typeof value != \object
          throw new Error "#{t.type.name} expected, #{typeof value} given"
        if !value.constructor?
          throw new Error "#{t.type.name} expected, object given"
        if value !instanceof t.type
          throw new Error "#{t.type.name} expected, #{value.constructor.name} given"
      @data.push value
  
  compile: (stream) ->
    stream ?= new BufferedStream!
    stream.writeByte @id
    packets[@id].types[i].write stream, value for value, i of @data
    stream.trim!
    
  toString: ->
    stringify = (data) ->
      data = for value of data
        switch typeof value
          case \number then (Math.floor value * 100) / 100
          case \string then "'#{value}'"
          case \object
            if value instanceof Slot
              value.toString!
            else if value instanceof Array
              stringify value
            else value..?.name ? "???"
          default value
      "[#{data.join ", "}]"
    "<Packet #{@name} #{stringify @data}>"

/*
 * Reading packets
 */
Packet.read = (type, stream) ->
  id = stream.readByte!
  packet = packets[id]
  if !packet?[type]
    throw new ReadError "Unknown packet #{makeHex id}"
  data = for t, i of packet.types
    value = t.read stream
    if packet[type][i] == null then continue
    value
  Packet type, id, ...data

/*
 * Creating packet constructors
 */
for i, packet in packets
  do !->
    id = Number i
    if !packet.server then return
    name = (packet.name[0].toLowerCase! + packet.name.substring 1).replace /[^A-z]/ig, ""
    Packet[name] = (...data) ->
      Packet \server, id, ...data
