packets = require "./packets"

makeHex = -> "0x#{if it <= 0xF then "0" else ""}#{it.toString 16 .toUpperCase!}"

/*
 * Packet class
 */
module.exports = class Packet
  
  (type, @id, ...data) ~>
    packet = packets[@id]
    @name = packet.name
    @data = []
    
    dataCounter = 0
    @size = 1
    
    if data.length != expectedLength = (i = 0; ++i if name? for name of packet[type]; i)
      throw new Error "#{expectedLength} arguments expected, #{data.length} given"
    for t, i of packet.types
      name = packet[type][i]
      value =
        if name == null then t.default
        else @data[name] = data[dataCounter++]
      if typeof t.type == \string
        if typeof value != t.type
          throw new Error "#{t.type} expected, #{typeof value} given"
      else
        if typeof value != \object
          throw new Error "#{t.type.name} expected, #{typeof value} given"
        if !value.constructor?
          throw new Error "#{t.type.name} expected, object given"
        if !(value instanceof t.type)
          throw new Error "#{t.type.name} expected, #{value.constructor.name} given"
      @data.push value
      @size += t.getSize value
  
  compile: ->
    if !@buffer
      @buffer = new Buffer @size
      @buffer[0] = @id
      offset = 1
      for value, i of @data
        t = packets[@id].types[i]
        t.write @buffer, value, offset
        offset += t.getSize value
    @buffer
    
  toString: ->
    data = for value of @data
      switch typeof value
        case \number then (Math.floor value * 100) / 100
        case \string then "'#{value}'"
        case \object then value.constructor?.name ? "???"
        default value
    "<Packet #{@name} [#{data.join ", "}]>"

/*
 * Reading packets
 */
Packet.read = (type, buffer, offset = 0) ->
  if buffer.length - offset < 1
    return new Error "Error parsing packet"
  startOffset = offset
  id = buffer[offset]
  offset += 1
  packet = packets[id]
  if !packet?.client
    return new Error "Unknown packet #{makeHex id}"
  data = []
  for t, i of packet.types
    name = packet.client[i]
    size = t.size
    if typeof size == \number and buffer.length - offset < size
      return new Error "Error parsing packet #{makeHex id}"
    value = t.read buffer, offset
    if value == null
      return new Error "Error parsing packet #{makeHex id}"
    offset += t.getSize value
    if name != null
      data.push value
  Packet type, id, ...data

/*
 * Creating packet constructors
 */
for i, packet in packets
  do ->
    id = Number i
    if !packet.server then return
    name = (packet.name[0].toLowerCase! + packet.name.substring 1).replace /[^A-z]/ig, ""
    Packet[name] = (...data) ->
      Packet \server, id, ...data
