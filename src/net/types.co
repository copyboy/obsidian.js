ReadError = require "./readError"
Slot      = require "./slot"
Metadata  = require "./metadata"

module.exports = class Datatype
  (@type, @default, @read, @write) ->

Datatype.byte   = byte   = new Datatype \number,  0,     (-> it.readByte!),   (!(s, v) -> s.writeByte v)
Datatype.sbyte  = sbyte  = new Datatype \number,  0,     (-> it.readSByte!),  (!(s, v) -> s.writeSByte v)
Datatype.short  = short  = new Datatype \number,  0,     (-> it.readShort!),  (!(s, v) -> s.writeShort v)
Datatype.int    = int    = new Datatype \number,  0,     (-> it.readInt!),    (!(s, v) -> s.writeInt v)
Datatype.long   = long   = new Datatype \number,  0,     (-> it.readLong!),   (!(s, v) -> s.writeLong v)
Datatype.float  = float  = new Datatype \number,  0,     (-> it.readFloat!),  (!(s, v) -> s.writeFloat v)
Datatype.double = double = new Datatype \number,  0,     (-> it.readDouble!), (!(s, v) -> s.writeDouble v)
Datatype.bool   = bool   = new Datatype \boolean, false, (-> it.readBool!),   (!(s, v) -> s.writeBool v)

# String
# TODO: Splice the stream's buffer directly?
readString = (stream) ->
  length = stream.readShort!
  if length < 0
    throw new ReadError "Negative string length"
  buffer = stream.read length * 2
  for i til length * 2 by 2
    [buffer[i], buffer[i + 1]] = [buffer[i + 1], buffer[i]]
  buffer.toString "ucs2"

writeString = !(stream, value) ->
  stream.writeShort value.length
  buffer = new Buffer value, "ucs2"
  for i til buffer.length by 2
    [buffer[i], buffer[i + 1]] = [buffer[i + 1], buffer[i]]
  stream.write buffer

# Raw
readRaw = (sizeType, stream) ->
  length = sizeType.read stream
  if length < 0
    throw new ReadError "Negative buffer length"
  stream.read length

writeRaw = !(sizeType, stream, value) ->
  sizeType.write stream, value.length
  stream.write value

# Array
readArray = (sizeType, types, stream) ->
  if types !instanceof Array
    types = [ types ]
  length = sizeType.read stream
  if length < 0
    throw new ReadError "Negative array length"
  value = for arrayType, i of types
    (for j til length then arrayType.read stream)
  if types.length == 1 then value[0] else value

writeArray = !(sizeType, types, stream, value) ->
  if types !instanceof Array
    value = [ value ]
    types = [ types ]
  length = value[0].length
  sizeType.write stream, length
  for arrayType, i of types
    for j til length
      arrayType.write stream, value[i][j]

# Thrower
readThrower = (stream) ->
  value = { id: stream.readInt! }
  if value.id > 0
    value.{x, y, z} = stream.readShort! for i til 3
  value
writeThrower = !(stream, value) ->
  stream.writeInt value.id
  if value.id > 0
    stream.writeShort stream, v for v of value.<[x, y, z]>

Datatype.string   =            new Datatype \string,  "",                readString,                    writeString
Datatype.slot     =            new Datatype Slot,     (new Slot -1),     (-> Slot.read it),             (!(s, v) -> v.write s)
Datatype.metadata =            new Datatype Metadata, (new Metadata []), (-> Metadata.read it),         (!(s, v) -> v.write s)
Datatype.record   =            new Datatype Array,    [ 0, 0, 0 ],       (-> it.readByte! for i til 3), (!(s, v) -> s.writeByte v[i] for i til 3)
Datatype.thrower  =            new Datatype Object,   { id: 0 },         (-> readThrower it),           (!(s, v) -> writeThrower s, v)
Datatype.raw      = (st)    -> new Datatype Buffer,   (new Buffer 0),    (-> readRaw st, it),           (!(s, v) -> writeRaw st, s, v)
Datatype.array    = (st, t) -> new Datatype Array,    (new Array 0),     (-> readArray st, t, it),      (!(s, v) -> writeArray st, t, s, v)
