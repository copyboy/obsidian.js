Slot = require "./slot"

/*
 * Helper functions
 */

# Long
readLong = (buffer, offset) ->
  buffer.readInt32BE offset + 4
writeLong = (buffer, value, offset) ->
  buffer.writeInt32BE 0, offset
  buffer.writeInt32BE value << 0, offset + 4

# String
readString = (buffer, offset) ->
  if buffer.length - offset < 2
    return null
  length = buffer.readInt16BE offset
  offset += 2
  if buffer.length - offset < length
    return null
  buf = new Buffer length * 2
  for ind to buffer.length - 1 by 2
    buf[ind] = buffer[offset + ind + 1]
    buf[ind + 1] = buffer[offset + ind]
  buf.toString "ucs2"
writeString = !(buffer, value, offset) ->
  buffer.writeInt16BE value.length, offset
  offset += 2
  buffer.write value, offset, value.length * 2, "ucs2"
  for ind from offset to offset + value.length * 2 by 2
    [buffer[ind], buffer[ind + 1]] =
      [buffer[ind + 1], buffer[ind]]

# Raw
readRaw = (sizeType, buffer, offset) ->
  if buffer.length - offset < sizeType.size
    return null
  length = sizeType.read buffer, offset
  offset += sizeType.size
  if buffer.length - offset < length
    return null
  buf = new Buffer length
  buffer.copy buf, 0, offset, offset + length
  buf
writeRaw = (sizeType, buffer, value, offset) ->
  sizeType.write buffer, value.length, offset
  offset += sizeType.size
  value.copy buffer, offset

/*
 * Datatype class
 */
class Datatype
  (@type, @default, @size, @read, @write) ->
  getSize: (value) ->
    if typeof @size == \function then @size value else @size

/*
 * Exports
 */
exports.byte   = new Datatype \number, 0, 1, ((b, o) -> b.readUInt8(o)), ((b, v, o) -> b.writeUInt8(v, o))
exports.sbyte  = new Datatype \number, 0, 1, ((b, o) -> b.readInt8(o)), ((b, v, o) -> b.writeInt8(v, o))
exports.short  = new Datatype \number, 0, 2, ((b, o) -> b.readInt16BE(o)), ((b, v, o) -> b.writeInt16BE(v, o))
exports.int    = new Datatype \number, 0, 4, ((b, o) -> b.readInt32BE(o)), ((b, v, o) -> b.writeInt32BE(v, o))
exports.long   = new Datatype \number, 0, 8, readLong, writeLong
exports.float  = new Datatype \number, 0, 4, ((b, o) -> b.readFloatBE(o)), ((b, v, o) -> b.writeFloatBE(v, o))
exports.double = new Datatype \number, 0, 8, ((b, o) -> b.readDoubleBE(o)), ((b, v, o) -> b.writeDoubleBE(v, o))
exports.bool   = new Datatype \boolean, false, 1, ((b, o) -> b[o] != 0), ((b, v, o) -> b[o] = if v then 1 else 0)

exports.string = new Datatype \string, "", (-> 2 + it.length * 2), readString, writeString
exports.slot   = new Datatype Slot, (new Slot -1), (-> it.size), ((b, o) -> Slot.read(b, o)), ((b, v, o) -> v.write(b, o))
exports.raw    = (sizeType) -> new Datatype Buffer, (new Buffer 0), (-> sizeType.size + it.length),
                                            ((b, o) -> readRaw sizeType, b, o), ((b, v, o) -> writeRaw sizeType, b, v, o)
